Class {
	#name : #ReHabFamily,
	#superclass : #CMGroup,
	#instVars : [
		'color',
		'label',
		'harvest',
		'membersLocations',
		'membersHarvests',
		'mySpaceUnits',
		'highlight',
		'home',
		'zones',
		'strategy'
	],
	#classVars : [
		'CurrentId'
	],
	#category : #'ReHab-Model'
}

{ #category : #id }
ReHabFamily class >> CurrentId [
	^CurrentId isNil
		ifTrue: [0]
		ifFalse: [CurrentId]
]

{ #category : #id }
ReHabFamily class >> CurrentId: x [
	^CurrentId := x
]

{ #category : #probes }
ReHabFamily class >> activeProbes [
	^self probes
]

{ #category : #probes }
ReHabFamily class >> colorOfProbe_cumulatedHarvest [

  ^ Color red
]

{ #category : #'default value' }
ReHabFamily class >> color_default [
	"Return the default value of color attribute"
	^nil
]

{ #category : #accessing }
ReHabFamily class >> colours [
	^#(#black #paleGreen #springGreen #brown #orange #yellow #red #blue #cyan #white)
]

{ #category : #'default value' }
ReHabFamily class >> cumulatedHarvest_default [
	"Return the default value of cumulatedHarvest attribute"
	^0
]

{ #category : #accessing }
ReHabFamily class >> entityName [

	^ 'Family'
]

{ #category : #'default value' }
ReHabFamily class >> harvest_default [
	"Return the default value of attribute #harvest : 0.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^0
]

{ #category : #'default value' }
ReHabFamily class >> highlight_default [
	"Return the default value of highlight attribute"
	^false
]

{ #category : #'default value' }
ReHabFamily class >> home_default [
	"Return the default value of attribute #home : Set new.
	!! This method was automatically generated by Cormas !!"

	^Set new
]

{ #category : #'default value' }
ReHabFamily class >> home_type [
	"Return the type of attribute #home.
	!! This method was automatically generated by Cormas !!"

	^Collection
]

{ #category : #'default value' }
ReHabFamily class >> label_default [
	"Return the default value of label attribute"
	^nil
]

{ #category : #accessing }
ReHabFamily class >> membersDistribution [
| dico |
	dico := Dictionary new.
	dico at: 1 put: #(20).
	dico at: 2 put: #(10 10).
	dico at: 3 put: #(7 7 6).
	dico at: 4 put: #(5 5 5 5).
	dico at: 5 put: #(4 4 4 4 4).
	dico at: 6 put: #(4 4 3 3 3 3).
	dico at: 7 put: #(3 3 3 3 3 3 2).
	dico at: 8 put: #(3 3 3 3 2 2 2 2).
	dico at: 9 put: #(3 3 2 2 2 2 2 2 2).
	dico at: 10 put: #(2 2 2 2 2 2 2 2 2 2).
	dico at: 11 put: #(2 2 2 2 2 2 2 2 2 1 1).
	dico at: 12 put: #(2 2 2 2 2 2 2 2 1 1 1 1).
	dico at: 13 put: #(2 2 2 2 2 2 2 1 1 1 1 1 1).
	dico at: 14 put: #(2 2 2 2 2 2 1 1 1 1 1 1 1 1).
	dico at: 15 put: #(2 2 2 2 2 1 1 1 1 1 1 1 1 1 1).
	dico at: 16 put: #(2 2 2 2 1 1 1 1 1 1 1 1 1 1 1 1).
	dico at: 17 put: #(2 2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1).
	dico at: 18 put: #(2 2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1).
	dico at: 19 put: #(2 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1).
	dico at: 20 put: #(1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1).
	^dico
]

{ #category : #'default value' }
ReHabFamily class >> mySpaceUnits_default [
	"Return the default value of mySpaceUnits attribute"
	^nil
]

{ #category : #'default value' }
ReHabFamily class >> strategy_default [
	"Return the default value of attribute #strategy : nil.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^nil
]

{ #category : #'parameter unit' }
ReHabFamily class >> strategy_type [
	"Return the type of attribute #strategy.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^UndefinedObject
]

{ #category : #'default value' }
ReHabFamily class >> zones_default [
	"Return the default value of attribute #zones : OrderedCollection new.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ OrderedCollection new
]

{ #category : #'parameter unit' }
ReHabFamily class >> zones_type [
	"Return the type of attribute #zones.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!"

	^ OrderedCollection
]

{ #category : #control }
ReHabFamily >> bringBackHomeMember: ph [

	| location |
	self home isEmpty
		ifTrue: [self halt]
		ifFalse:
			[location := Cormas
				selectRandomlyFrom:
					(self home select: [:c | (c occupantsType: ReHabPlantHarvester) isEmpty]).
			location isNil ifFalse: [ph moveTo: location]]
]

{ #category : #control }
ReHabFamily >> bringMembersBackHome [

	| location |
	self home isEmpty
		ifTrue: [self halt]
		ifFalse:
			[self components
				do:
					[:ph |
					location := Cormas
						selectRandomlyFrom:
							(self home select: [:c | (c occupantsType: ReHabPlantHarvester) isEmpty]).
					location isNil ifFalse: [ph moveTo: location]]]
]

{ #category : #accessing }
ReHabFamily >> color [
	"Getter accessor without default value "
	^color
]

{ #category : #accessing }
ReHabFamily >> color: anObject [
	color := anObject
]

{ #category : #control }
ReHabFamily >> decideHarvestersLocations [
| locations |

	self membersLocations: Dictionary new.

	locations := self strategy getLocations.

	locations size ~= self size ifTrue: [self halt].

	self components asArray
		with: locations
		do:
			[:anIndividualHarvester :n |
			self membersLocations
				at: anIndividualHarvester id
				put: n]
]

{ #category : #probes }
ReHabFamily >> harvest [
	"Getter accessor with default value = 0 "
	^harvest ifNil:[harvest := 0]
]

{ #category : #accessing }
ReHabFamily >> harvest: anObject [
	harvest := anObject
]

{ #category : #accessing }
ReHabFamily >> highlight [
	"Getter accessor with default value = false "
	^highlight ifNil:[highlight := false]
]

{ #category : #accessing }
ReHabFamily >> highlight: anObject [
	highlight := anObject
]

{ #category : #accessing }
ReHabFamily >> home [
	"Getter accessor with initial value = Set new.
	!! This method was automatically generated by Cormas !! "
	^home ifNil:[home := Set new]
]

{ #category : #accessing }
ReHabFamily >> home: anObject [
	"Setter accessor of attribute home.
	!! This method was automatically generated by Cormas !!  "
	home := anObject
]

{ #category : #accessing }
ReHabFamily >> label [
	"Getter accessor without default value "
	^label
]

{ #category : #accessing }
ReHabFamily >> label: anObject [
	label := anObject
]

{ #category : #accessing }
ReHabFamily >> membersHarvests [
	"Getter accessor with default value = Dictionary new "
	^membersHarvests ifNil:[membersHarvests := Dictionary new]
]

{ #category : #accessing }
ReHabFamily >> membersHarvests: anObject [
	membersHarvests := anObject
]

{ #category : #accessing }
ReHabFamily >> membersLocations [
	"Getter accessor with default value = Dictionary new "
	^membersLocations ifNil:[membersLocations := Dictionary new]
]

{ #category : #accessing }
ReHabFamily >> membersLocations: anObject [
	membersLocations := anObject
]

{ #category : #control }
ReHabFamily >> sendMembersHarvesting [
	| individualHarvester location |
	self components do: [:m | m harvest: 0].
	self membersLocations keysAndValuesDo:
			[:k :v |
			individualHarvester := self components detect: [:ih | ih id = k]
						ifNone: [nil].
			location := self zones detect: [:c | c id = v] ifNone: [nil].
			(individualHarvester notNil and: [location notNil])
				ifTrue: [individualHarvester moveTo: location]]
]

{ #category : #accessing }
ReHabFamily >> strategy [
	"Getter accessor without initial value "
	^strategy
]

{ #category : #accessing }
ReHabFamily >> strategy: aUndefinedObject [
	"Setter accessor of attribute strategy	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	strategy := aUndefinedObject
]

{ #category : #control }
ReHabFamily >> updateHarvest [
	self harvest: self harvest
				+ (self components inject: 0 into: [:sum :member | sum + member harvest])
]

{ #category : #accessing }
ReHabFamily >> zones [
	"Getter accessor with initial value = OrderedCollection new.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "

	^ zones ifNil: [ zones := OrderedCollection new ]
]

{ #category : #accessing }
ReHabFamily >> zones: anOrderedCollection [
	"Setter accessor of attribute zones	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	zones := anOrderedCollection
]

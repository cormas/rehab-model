Class {
	#name : #ReHabZone,
	#superclass : #CMSpatialEntityElement,
	#instVars : [
		'access',
		'noHarvestPeriod',
		'biomass'
	],
	#classInstVars : [
		'maxBiomass',
		'minBiomass'
	],
	#category : #'ReHab-Model'
}

{ #category : #accessing }
ReHabZone class >> entityName [

	^ 'Zone'
]

{ #category : #testing }
ReHabZone class >> isAbstract [
^false
]

{ #category : #accessing }
ReHabZone class >> maxBiomass [
	"Getter accessor with initial value = 3.
	!! This method was automatically generated by Cormas !! "
	^maxBiomass ifNil:[maxBiomass := 3]
]

{ #category : #accessing }
ReHabZone class >> minBiomass [
	"Getter accessor with initial value = 0.
	!! This method was automatically generated by Cormas !! "
	^minBiomass ifNil:[minBiomass := 0]
]

{ #category : #accessing }
ReHabZone >> access [
	"Getter accessor with initial value = true.
	!! This method was automatically generated by Cormas !! "
	^access ifNil:[access := true]
]

{ #category : #accessing }
ReHabZone >> access: anObject [
	"Setter accessor of attribute access.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	access = anObject ifTrue:[^nil].   "for optimization"
	access := anObject.
	self changed
]

{ #category : #control }
ReHabZone >> allocateHarvests [
| harvesters |
	self updateNoHarvestPeriod.
	self hasHarvesters 
		ifTrue:
			[harvesters := Cormas mix: self harvesters.
			self biomass < self class maxBiomass
				ifTrue: [harvesters first harvest: self biomass]
				ifFalse:
					[harvesters first harvest: ReHabPlantHarvester maxHarvest.
					harvesters size > 1
						ifTrue: [(harvesters at: 2) harvest: self class maxBiomass - ReHabPlantHarvester maxHarvest]]]
]

{ #category : #accessing }
ReHabZone >> biomass [
	"Getter accessor with initial value = 0.
	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !! "
	^biomass ifNil:[biomass := 0]
]

{ #category : #accessing }
ReHabZone >> biomass: aSmallInteger [
	"Setter accessor of attribute biomass	This method was automatically generated by Cormas.
	!! BECAREFUL, You should not modify this method as it can be generated again when changing the value (Sensitivity Analysis for ex) !!  "
	biomass = aSmallInteger ifTrue:[^nil].   "for optimization"
	biomass := aSmallInteger.
	self changed
]

{ #category : #dynamics }
ReHabZone >> decreaseBiomassBy: x [
	self biomass - x < self class minBiomass
		ifTrue: [self biomass: self class minBiomass]
		ifFalse: [self biomass: self biomass - x]
]

{ #category : #'accessing - occupants' }
ReHabZone >> harvesters [

	^self occupantsType: ReHabPlantHarvester
]

{ #category : #'accessing - occupants' }
ReHabZone >> hasHarvesters [

	^ self numberOfHarvesters > 0
]

{ #category : #dynamics }
ReHabZone >> increaseBiomassBy: x [
	self biomass + x > self class maxBiomass
		ifTrue: [self biomass: self class maxBiomass]
		ifFalse: [self biomass: self biomass + x]
]

{ #category : #accessing }
ReHabZone >> noHarvestPeriod [
	"Getter accessor with initial value = 0.
	!! This method was automatically generated by Cormas !! "
	^noHarvestPeriod ifNil:[noHarvestPeriod := 0]
]

{ #category : #accessing }
ReHabZone >> noHarvestPeriod: anObject [
	"Setter accessor of attribute noHarvestPeriod.
	!! This method was automatically generated by Cormas !!  "
	noHarvestPeriod := anObject
]

{ #category : #'accessing - occupants' }
ReHabZone >> numberOfHarvesters [

	^self harvesters size
]

{ #category : #pov }
ReHabZone >> povBiomass [

	^ self
		povAttribute: #biomass
		min: self class minBiomass
		max: self class maxBiomass
		color: Color green
]

{ #category : #dynamics }
ReHabZone >> renewBiomass [
	self hasHarvesters
		ifFalse:
			[self noHarvestPeriod = 1 ifTrue: [self increaseBiomassBy: 1].
			self noHarvestPeriod > 2 ifTrue: [self decreaseBiomassBy: 1]].
	self numberOfHarvesters > 1 ifTrue: [self decreaseBiomassBy: self numberOfHarvesters].
]

{ #category : #control }
ReHabZone >> updateNoHarvestPeriod [
	self hasHarvesters
		ifFalse: [self noHarvestPeriod: self noHarvestPeriod + 1]
		ifTrue: [self noHarvestPeriod: 0]
]
